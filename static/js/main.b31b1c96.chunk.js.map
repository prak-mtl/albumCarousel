{"version":3,"sources":["LazyImage/LazyImageContext.js","Carousel/CarouselButtons.js","Carousel/Carousel.js","LazyImage/LazyImage.js","components/Slider/AlbumSlider.js","components/Album/Album.js","App.js","serviceWorker.js","index.js"],"names":["Component","DotBtn","selected","onClick","className","PrevBtn","enabled","disabled","viewBox","d","NextBtn","Carousel","children","useState","carousel","initCarousel","selectedIndex","setSelectedIndex","scrollSnaps","setScrollSnaps","scrollTo","useCallback","index","scrollPrev","scrollNext","prevBtnEnabled","togglePrevBtnEnabled","nextBtnEnabled","toggleNextBtnEnabled","useEffect","onSelect","selectedScrollSnap","canScrollPrev","canScrollNext","scrollSnapList","on","destroy","emblaRef","options","loop","htmlTagName","map","Child","key","snap","Context","createContext","elements_selector","LazyImageProvider","lazyLoad","setLazyLoad","LazyLoad","Provider","value","withLazyImageContext","src","aspectRatio","update","paddingTop","style","data-src","slt","props","Consumer","context","AlbumSlider","state","imagesArr","Axios","get","this","id","then","response","setState","data","length","image","url","title","Album","albumArr","item","userId","height","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b31b1c96.chunk.js","sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\nimport LazyLoad from \"vanilla-lazyload\";\n\n// Create a new React context\nconst Context = createContext();\n\nconst options = { elements_selector: \".lazyImage__img\" };\n\n// Export the context provider\nexport const LazyImageProvider = ({ children }) => {\n    // Create the state that will hold the LazyLoad API\n    const [lazyLoad, setLazyLoad] = useState(null);\n\n    // Prepare for doing stuff on mount and unmount\n    useEffect(() => {\n        if (!lazyLoad) setLazyLoad(new LazyLoad(options));\n        // Clean up on unmount\n        return () => lazyLoad && lazyLoad.destroy();\n    }, [lazyLoad]);\n\n    // Expose our LazyLoad API to its children components\n    return <Context.Provider value={lazyLoad}>{children}</Context.Provider>;\n};\n\nexport const withLazyImageContext = Component => props => (\n    <Context.Consumer>\n        {context => <Component {...props} lazyLoad={context} />}\n    </Context.Consumer>\n);","import React from \"react\";\n\n// Apply is-selected class if selected is true\nexport const DotBtn = ({ selected, onClick }) => (\n  <button\n    className={`carousel__dot${selected ? \" is-selected\" : \"\"}`}\n    onClick={onClick}\n  />\n);\n\nexport const PrevBtn = ({ enabled, onClick }) => (\n  <button\n    className=\"carousel__arrowBtn carousel__arrowBtn--prev\"\n    disabled={!enabled}\n    onClick={onClick}\n  >\n    <svg className=\"carousel__arrowBtn__svg\" viewBox=\"138 -1.001 366.5 644\">\n      <path d=\"M428.36 12.5c16.67-16.67 43.76-16.67 60.42 0 16.67 16.67 16.67 \n        43.76 0 60.42L241.7 320c148.25 148.24 230.61 230.6 247.08 247.08 16.67 16.66 \n        16.67 43.75 0 60.42-16.67 16.66-43.76 16.67-60.42 0-27.72-27.71-249.45-249.37-277.16-277.08a42.308\n        42.308 0 0 1-12.48-30.34c0-11.1 4.1-22.05 12.48-30.42C206.63 234.23 400.64 40.21 428.36 12.5z\" />\n    </svg>\n  </button>\n);\n\nexport const NextBtn = ({ enabled, onClick }) => (\n  <button\n    className=\"carousel__arrowBtn carousel__arrowBtn--next\"\n    disabled={!enabled}\n    onClick={onClick}\n  >\n    <svg className=\"carousel__arrowBtn__svg\" viewBox=\"0 0 238.003 238.003\">\n      <path d=\"M181.776 107.719L78.705 4.648c-6.198-6.198-16.273-6.198-22.47 \n        0s-6.198 16.273 0 22.47l91.883 91.883-91.883 91.883c-6.198 6.198-6.198 16.273 \n        0 22.47s16.273 6.198 22.47 0l103.071-103.039a15.741 15.741 0 0 \n        0 4.64-11.283c0-4.13-1.526-8.199-4.64-11.313z\" />\n    </svg>\n  </button>\n);","import React, { useState, useEffect, useCallback } from \"react\";\nimport EmblaCarouselReact from \"embla-carousel-react\";\nimport { DotBtn, PrevBtn, NextBtn } from \"./CarouselButtons\";\nimport \"./carousel.css\";\n\nconst Carousel = ({ children }) => {\n    const [carousel, initCarousel] = useState(null);\n    // Add selectedIndex state containing the selected index\n    const [selectedIndex, setSelectedIndex] = useState(0);\n    // Add scrollSnaps state containing all snap points\n    const [scrollSnaps, setScrollSnaps] = useState([]);\n\n    const scrollTo = useCallback(index => carousel.scrollTo(index), [carousel]);\n    // Add scrollPrev\n    const scrollPrev = useCallback(() => carousel.scrollPrev(), [carousel]);\n    // Add scrollNext\n    const scrollNext = useCallback(() => carousel.scrollNext(), [carousel]);\n    // Add prev button enabled state\n    const [prevBtnEnabled, togglePrevBtnEnabled] = useState(false);\n    // Add next button enabled state \n    const [nextBtnEnabled, toggleNextBtnEnabled] = useState(false);\n\n    useEffect(() => {\n        // On every new snap point select, update selectedIndex\n        const onSelect = () => {\n            setSelectedIndex(carousel.selectedScrollSnap());\n            // Toggle buttons enabled/disabled\n            togglePrevBtnEnabled(carousel.canScrollPrev());\n            toggleNextBtnEnabled(carousel.canScrollNext());\n        };\n\n        // When our carousel has mounted:\n        if (carousel) {\n            // Store snap points provided by the carousel\n            setScrollSnaps(carousel.scrollSnapList());\n            // Hook our onSelect function to the carousel select event\n            carousel.on(\"select\", onSelect);\n            // Invoke onSelect\n            onSelect();\n        }\n        // Destroy the carousel component on unmount\n        return () => carousel && carousel.destroy();\n    }, [carousel]);\n    return (\n        <div className=\"carousel\">\n            <div className=\"carousel__wrap\">\n                {/* Grab the carousel API in the emblaRef function prop and assign it to our carousel state  */}\n                <EmblaCarouselReact\n                    className=\"carousel__viewport\"\n                    emblaRef={initCarousel}\n                    options={{ loop: false /* Carousel Options */ }}\n                    htmlTagName=\"div\"\n                >\n                    <div className=\"carousel__container\">\n                        {children && children.map((Child, index) => (\n                            <div className=\"carousel__item\" key={index}>\n                                {Child}\n                            </div>\n                        ))}\n                    </div>\n                </EmblaCarouselReact>\n                <PrevBtn onClick={scrollPrev} enabled={prevBtnEnabled} />\n                <NextBtn onClick={scrollNext} enabled={nextBtnEnabled} />\n            </div>\n            <div className=\"carousel__dots\">\n                {scrollSnaps && scrollSnaps.map((snap, index) => (\n                    <DotBtn\n                        selected={index === selectedIndex}\n                        onClick={() => scrollTo(index)}\n                        key={index}\n                    />\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default Carousel;","import React, { useEffect } from \"react\";\nimport { withLazyImageContext } from \"./LazyImageContext\"; // Grab the context connector\nimport \"./lazyImage.css\";\n\nconst LazyImage = ({ src, aspectRatio, lazyLoad }) => {\n    // Calculate the aspect ratio\n    useEffect(() => {\n        if (lazyLoad) lazyLoad.update();\n    }, [src, aspectRatio, lazyLoad]);\n\n    const paddingTop = `${(aspectRatio[1] / aspectRatio[0]) * 100}%`;\n\n    // Set the placeholder size on our wrapper div\n    return (\n        <div className=\"lazyImage\" style={{ paddingTop }}>\n            <img className=\"lazyImage__img\" data-src={src} slt={src}/>\n        </div>\n    );\n};\n\nexport default withLazyImageContext(LazyImage);","import React, { Component } from 'react';\nimport Axios from \"axios\";\nimport Carousel from \"../../Carousel/Carousel\";\nimport { LazyImageProvider } from \"../../LazyImage/LazyImageContext\";\nimport LazyImage from \"../../LazyImage/LazyImage\"; // Import LazyImage\n\nexport default class AlbumSlider extends Component {\n    state = {\n        imagesArr: []\n    }\n    componentDidMount() {\n        Axios.get(`https://jsonplaceholder.typicode.com/photos?albumId=${this.props.id}`).then(\n            response => {\n                this.setState({ imagesArr: response.data });\n            }\n        );\n    }\n    render() {\n        const { imagesArr } = this.state;\n        if (!imagesArr.length)\n            return null;\n        return (\n            <LazyImageProvider>\n                <Carousel>\n                    {imagesArr.map((image, index) => (\n                        <>\n                            <LazyImage aspectRatio={[10, 7]} src={image.url} key={index} />\n                            <div className=\"imageTitle\">{image.title}</div>\n                            <div className=\"imageId\">id: {image.id}</div>\n                        </>\n                    ))}\n                </Carousel>\n            </LazyImageProvider>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport Axios from \"axios\";\nimport AlbumSlider from '../Slider/AlbumSlider';\nimport LazyLoad from 'react-lazyload';\n\nexport default class Album extends Component {\n    state = {\n        albumArr: []\n    }\n    componentDidMount() {\n        Axios.get(\"https://jsonplaceholder.typicode.com/albums\").then(\n            response => {\n                this.setState({ albumArr: response.data });\n            }\n        );\n    }\n\n    render() {\n        const { albumArr } = this.state;\n        return (\n            albumArr && albumArr.map((item, index) => (\n                <div className=\"album\">\n                    <h3>{item.title}</h3>\n                    <span>id: {item.id}, </span><span>user Id: {item.userId}</span>\n                    <hr />\n                    <LazyLoad height={200}>\n                        <AlbumSlider id={item.id} />\n                    </LazyLoad>\n                </div>\n            ))\n        )\n    }\n}","import React from 'react';\nimport './App.css';\nimport Album from './components/Album/Album';\n\nfunction App() {\n  return (\n    <Album />\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}